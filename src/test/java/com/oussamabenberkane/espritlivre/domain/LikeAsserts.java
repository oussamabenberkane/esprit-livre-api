package com.oussamabenberkane.espritlivre.domain;

import static com.oussamabenberkane.espritlivre.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class LikeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLikeAllPropertiesEquals(Like expected, Like actual) {
        assertLikeAutoGeneratedPropertiesEquals(expected, actual);
        assertLikeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLikeAllUpdatablePropertiesEquals(Like expected, Like actual) {
        assertLikeUpdatableFieldsEquals(expected, actual);
        assertLikeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLikeAutoGeneratedPropertiesEquals(Like expected, Like actual) {
        assertThat(actual)
            .as("Verify Like auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLikeUpdatableFieldsEquals(Like expected, Like actual) {
        assertThat(actual)
            .as("Verify Like relevant properties")
            .satisfies(a ->
                assertThat(a.getCreatedAt())
                    .as("check createdAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getCreatedAt())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLikeUpdatableRelationshipsEquals(Like expected, Like actual) {
        assertThat(actual)
            .as("Verify Like relationships")
            .satisfies(a -> assertThat(a.getBook()).as("check book").isEqualTo(expected.getBook()));
    }
}
